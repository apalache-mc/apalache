#!/usr/bin/env bash
#
# Run the APALACHE model checker
#
# Igor Konnov, 2018-2019

DIR=`dirname $0`
DIR=`cd "$DIR/.."; pwd`
echo "# Tool home: $DIR"
# try to find either a release jar, or a local build
DISTS=`mktemp /tmp/apalache-dists.XXXX`
find >$DISTS "$DIR" "$DIR/target/scala-2.12" \
    -maxdepth 1 -name "apalache-pkg-*-full.jar"

case `cat $DISTS | wc -l | sed 's/[[:space:]]*//g'` in
    1)
        JAR=`head -n 1 $DISTS`
        echo "# Package:   $JAR"
        ;;
    0) 
        echo "ERROR: Distribution jar not found. Did you run make package?"
        exit 1
        ;;
    *) 
        echo "Found multiple apalache packages:"
        cat $DISTS
        echo ""
        echo "To resolve this, run:"
        echo "  make clean package"
        exit 1
        ;;
esac
rm -f "$DISTS"

# an additional lookup list for the TLA+ modules
TLA_LIB="$DIR/src/tla"

# This is a temporary solution for handling TLA_PATH via a Java variable.
# See apalache/#187.
# Once tlaplus/#490,#493 are released, remove this workaround.
if [ -z "$TLA_PATH" ]; then
    TLA_PATH="$TLA_LIB"
else
    TLA_PATH="$TLA_LIB:$TLA_PATH"
fi

JVM_ARGS=${JVM_ARGS:-""}

# Check of the heap size is already set
if ! [[ "$JVM_ARGS" =~ -Xmx ]]
then
    # If not, set our default heap size
    JVM_ARGS="${JVM_ARGS} -Xmx4096m"
fi

JVM_ARGS="$JVM_ARGS -DTLA-Library=$TLA_PATH"

echo "# JVM args: $JVM_ARGS"
echo "#"

# a trap for SIGINT and SIGTERM
sigterm() {
    echo "Premature termination requested. Killing apalache-mc (pid $child)" 1>&2
    trap - SIGTERM SIGINT # unregister to avoid recursion below
    # send termination to the child process
    kill SIGTERM $child 2>/dev/null
}

trap sigterm SIGTERM SIGINT

# run java in the background in order to react to SIGTERM
java $JVM_ARGS -jar "$JAR" "$@" &
child=$!
wait "$child"
