1,2c1,3
< -------------------------- MODULE MC4_8 ---------------------------------------
< \* an instance of BinSearch4 with all parameters fixed
---
> -------------------------- MODULE MC5_8 ---------------------------------------
> \* an instance of BinSearch5 with all parameters fixed
> EXTENDS Apalache
6,10d6
< \* the input sequence to try
< \* @type: Seq(Int);
< INPUT_SEQ == << >>
< \* the element to search for
< INPUT_KEY == 10
12c8,21
< \* introduce the variables to be used in BinSearch4
---
> \* We do not fix INT_SEQ and INPUT_KEY.
> \* Instead, we reason about all sequences with ConstInit.
> 
> CONSTANTS
>     \* The input sequence.
>     \*
>     \* @type: Seq(Int);
>     INPUT_SEQ,
>     \* The key to search for.
>     \*
>     \* @type: Int;
>     INPUT_KEY
> 
> \* introduce the variables to be used in BinSearch5
24c33,40
< INSTANCE BinSearch4
---
> INSTANCE BinSearch5
> 
> \* Instead of checking a concrete sequence, which is not very exciting,
> \* we simply initialize constants with arbitrary values of proper types.
> ConstInit ==
>     /\ INPUT_KEY = Gen(1)
>     /\ INPUT_SEQ = Gen(MAX_INT)
> 
