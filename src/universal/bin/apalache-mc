#!/usr/bin/env bash
#
# Run the APALACHE model checker
#
# @dev: This script is copied from `src/universal/bin/apalache-mc` during packaging.
#
# Igor Konnov, Shon Feder 2018-2025

# See https://sipb.mit.edu/doc/safe-shell/
set -euf -o pipefail

# The directory where the script is run from
# See https://stackoverflow.com/a/246128/1187277
SOURCE=${BASH_SOURCE[0]}
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

APALACHE_JAR=${APALACHE_JAR:-"$DIR/../lib/apalache.jar"}
JVM_ARGS=${JVM_ARGS:-""}
JVM_GC_ARGS=${JVM_GC_ARGS:-""}

if ! test -f "$APALACHE_JAR"
then
    echo "ERROR: No file found at ${APALACHE_JAR}"
    echo "       Ensure you have run 'make package' and are running the script from the"
    echo "       distribution pacakge, or else set APALACHE_JAR to point to your custom"
    echo "       build jar."
fi

# Check if the heap size is already set
if ! [[ "$JVM_ARGS" =~ -Xmx || "$JVM_ARGS" =~ -XX:MaxRAMPercentage ]]
then
    # If not, set our default heap size
    JVM_ARGS="${JVM_ARGS} -Xmx4096m"
fi

if [ -z "$JVM_GC_ARGS" ]
then
    # We have to periodically garbage collect, as JVM and Z3 may compete for memory.
    # By default, JVM does not free memory unless it hits the limits.
    # As a result, there may be not enough memory left for Z3.
    # This is especially relevant for the server instances, which may process
    # multiple model checking requests concurrently.
    JVM_GC_ARGS="${JVM_GC_ARGS} -XX:+UseG1GC -XX:G1PeriodicGCInterval=600000 -XX:+G1PeriodicGCInvokesConcurrent"
fi

# Avoid SANY concurrency issues: https://github.com/tlaplus/tlaplus/issues/688
if [ -z "${TMPDIR:-}" ]; then
    TMPDIR="$(pwd)/tmp"
    mkdir -p "$TMPDIR"
fi
JAVA_IO_TMPDIR=`mktemp -d -t SANYXXXXXXXXXX`

# Check whether the CLI args contains the debug flag
if [[ "$*" =~ '--debug' ]]
then
    echo "# Tool home: $DIR"
    echo "# Package:   $APALACHE_JAR"
    echo "# JVM args: $JVM_ARGS"
    echo "# -Djava.io.tmpdir: $JAVA_IO_TMPDIR"
    echo "#"
fi

# Run with `exec` to replace the PID, rather than running in a subshell.
# This saves one process, and ensures signals are sent to the replacement process
# C.f. https://github.com/sbt/sbt-native-packager/blob/e72f2f45b8cab5881add1cd62743bfc69c2b9b4d/src/main/resources/com/typesafe/sbt/packager/archetypes/scripts/bash-template#L141-L142
exec java $JVM_ARGS $JVM_GC_ARGS -Djava.io.tmpdir=$JAVA_IO_TMPDIR -jar "$APALACHE_JAR" "$@"