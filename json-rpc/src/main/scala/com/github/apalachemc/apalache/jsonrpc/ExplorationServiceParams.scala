package com.github.apalachemc.apalache.jsonrpc

sealed abstract class ExplorationServiceParams

/**
 * Parameters for loading a specification in the JSON-RPC server.
 * @param sources
 *   A sequence of specification modules, each encoded in base64. The head must be the root module, and the rest are
 *   additional modules that are imported by the root module (except the standard ones).
 */
case class LoadSpecParams(sources: Seq[String]) extends ExplorationServiceParams

/**
 * Parameters for disposing of a session in the JSON-RPC server.
 * @param sessionId
 *   the ID of the session to be disposed. The session ID is generated by the server when a specification is loaded.
 */
case class DisposeSpecParams(sessionId: String) extends ExplorationServiceParams

/**
 * Parameters for preparing a symbolic transition in the solver context.
 * @param sessionId
 *   the ID of the previously loaded specification
 * @param snapshotId
 *   the snapshot ID for recovering the context before the transition is assumed. If it is negative, no snapshot
 *   recovery is performed.
 * @param transitionId
 *   the number of transition to prepare, starting from 0. On step 0, it must be in the range `[0, nInitTransitions)`,
 *   on step 1 and later, it must be in the range `[0, nNextTransitions)`.
 * @param checkEnabled
 *   whether to check if the transition is enabled. If `false`, the transition is prepared and assumed, but no
 *   satisfiability is checked
 * @param timeoutSec
 *   the timeout in seconds for checking satisfiability. If `0`, the default timeout is used. This parameter is ignored
 *   if `checkEnabled` is `false`.
 */
case class AssumeTransitionParams(
    sessionId: String,
    snapshotId: Int = -1,
    transitionId: Int,
    checkEnabled: Boolean,
    timeoutSec: Int = 0)
    extends ExplorationServiceParams

object AssumeTransitionParams {
  def apply(sessionId: String, snapshotId: Int, transitionId: Int): AssumeTransitionParams = {
    new AssumeTransitionParams(sessionId, snapshotId, transitionId, checkEnabled = true, timeoutSec = 0)
  }

  def apply(
      sessionId: String,
      snapshotId: Int,
      transitionId: Int,
      checkEnabled: Boolean): AssumeTransitionParams = {
    new AssumeTransitionParams(sessionId, snapshotId, transitionId, checkEnabled, timeoutSec = 0)
  }
}

/**
 * Parameters for switching to the next step in symbolic path exploration.
 * @param sessionId
 *   the ID of the previously loaded specification
 */
case class NextStepParams(sessionId: String) extends ExplorationServiceParams

/**
 * Parameters for checking invariants in the current state or transition.
 * @param sessionId
 *   the ID of the previously loaded specification
 * @param stateInvariantIds
 *   the IDs of state invariants to check
 * @param actionInvariantIds
 *   the IDS of action invariants to check
 * @param traceInvariantIds
 *   the IDs of trace invariants to check
 * @param fail
 *   the number of violations to find before stopping. If `0`, all violations are reported. Default value is `1`.
 * @param timeoutSec
 *   the timeout in seconds for checking satisfiability. If `0`, the default timeout is used. This parameter is ignored
 *   if `checkEnabled` is `false`.
 */
case class CheckInvariantParams(
    sessionId: String,
    stateInvariantIds: List[Int],
    actionInvariantIds: List[Int],
    traceInvariantIds: List[Int],
    fail: Int = 1,
    timeoutSec: Int = 0)
    extends ExplorationServiceParams