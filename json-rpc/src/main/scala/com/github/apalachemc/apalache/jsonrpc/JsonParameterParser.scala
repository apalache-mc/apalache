package com.github.apalachemc.apalache.jsonrpc

import com.fasterxml.jackson.core.TreeNode
import com.fasterxml.jackson.databind.ObjectMapper

/**
 * Parameters for loading a specification in the JSON-RPC server.
 * @param sources
 *   A sequence of specification modules, each encoded in base64. The head must be the root module, and the rest are
 *   additional modules that are imported by the root module (except the standard ones).
 */
case class LoadSpecParams(sources: Seq[String])

/**
 * Parameters for disposing of a session in the JSON-RPC server.
 * @param sessionId
 *   the ID of the session to be disposed. The session ID is generated by the server when a specification is loaded.
 */
case class DisposeSpecParams(sessionId: String)

/**
 * A parser for JSON parameters used in the JSON-RPC server.
 * @param mapper
 *   An instance of ObjectMapper for converting JSON values.
 */
class JsonParameterParser(mapper: ObjectMapper) {

  /**
   * Parses the parameters for loading a specification. The expected format is a JSON object with a "sources" field,
   * which is a sequence of pairs, where each pair consists of a name and a base64-encoded content.
   * @param params
   *   The "params" field from a JSON-RPC request, expected to be a TreeNode.
   * @return
   *   Either an error message or a LoadSpecParams instance containing the parsed sources.
   */
  def parseLoadSpec(params: TreeNode): Either[String, LoadSpecParams] = {
    // Convert LoadSpecParams to class
    try {
      val specParams = mapper.treeToValue(params, classOf[LoadSpecParams])

      if (specParams.sources.isEmpty) {
        return Left("loadSpec parameters must be non-empty.")
      }

      val decodedSources = specParams.sources.map { base64Content =>
        val decodedContent = java.util.Base64.getDecoder.decode(base64Content)
        new String(decodedContent, "UTF-8")
      }

      Right(LoadSpecParams(decodedSources))
    } catch {
      case e: Exception =>
        Left(s"Parse error in loadSpec: ${e.getMessage}")
    }
  }

  /**
   * Parses the parameters for disposing a session in the JSON-RPC server.
   * @param params
   *   The "params" field from a JSON-RPC request, expected to be a TreeNode.
   * @return
   *   Either an error message or a LoadSpecParams instance containing the parsed sources.
   */
  def parseDisposeSpec(params: TreeNode): Either[String, DisposeSpecParams] = {
    // Convert DisposeSpecParams to class
    try {
      val disposeParams = mapper.treeToValue(params, classOf[DisposeSpecParams])
      if (disposeParams.sessionId.isEmpty) {
        return Left("disposeSpec parameters must contain a non-empty sessionId.")
      }
      Right(disposeParams)
    } catch {
      case e: Exception =>
        Left(s"Parse error in disposeSpec: ${e.getMessage}")
    }
  }

  /**
   * Parses the parameters for preparing a transition in the JSON-RPC server.
   * @param params
   *   The "params" field from a JSON-RPC request, expected to be a TreeNode.
   * @return
   *   Either an error message or a LoadSpecParams instance containing the parsed sources.
   */
  def parsePrepareTransition(params: TreeNode): Either[String, PrepareTransitionParams] = {
    // Convert PrepareTransitionParams to class
    try {
      val prepareParams = mapper.treeToValue(params, classOf[PrepareTransitionParams])
      if (prepareParams.sessionId.isEmpty) {
        return Left("prepareTransition parameters must contain a non-empty sessionId.")
      }
      if (prepareParams.transitionId < 0) {
        return Left("prepareTransition parameters must contain a non-negative transitionId.")
      }
      Right(prepareParams)
    } catch {
      case e: Exception =>
        Left(s"Parse error in prepareTransition: ${e.getMessage}")
    }
  }
}
