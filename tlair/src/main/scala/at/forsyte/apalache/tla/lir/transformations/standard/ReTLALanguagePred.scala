package at.forsyte.apalache.tla.lir.transformations.standard

import at.forsyte.apalache.tla.lir._
import at.forsyte.apalache.tla.lir.oper._
import at.forsyte.apalache.tla.lir.transformations.{LanguagePred, PredResult, PredResultFail, PredResultOk}
import at.forsyte.apalache.tla.lir.values._

import scala.collection.immutable.HashSet

/**
 * <p>Test whether the expressions fit into the reTLA fragment: all calls to user operators are inlined,
 * except the calls to nullary let-in definitions.</p>
 *
 * @author Jure Kukovec
 */
class ReTLALanguagePred extends LanguagePred {
  override def isModuleOk(mod: TlaModule): PredResult = {
    mod.operDeclarations.foldLeft[PredResult](PredResultOk()) { case (r, d) =>
      r.and(isExprOk(d.body))
    }
  }

  override def isExprOk(expr: TlaEx): PredResult = {
    isOkInContext(Set(), expr)
  }

  private def isOkInContext(letDefs: Set[String], expr: TlaEx): PredResult = {
    expr match {
      case ValEx(TlaBool(_)) | ValEx(TlaInt(_)) | ValEx(TlaStr(_)) =>
        PredResultOk()

      case ValEx(TlaIntSet) | ValEx(TlaNatSet) | ValEx(TlaBoolSet) =>
        PredResultOk()

      case NameEx(_) =>
        PredResultOk()

      case OperEx(oper, arg) if ReTLALanguagePred.unaryOps.contains(oper) =>
        isOkInContext(letDefs, arg)

      case OperEx(oper, lhs, rhs) if ReTLALanguagePred.binaryOps.contains(oper) =>
        isOkInContext(letDefs, lhs)
          .and(isOkInContext(letDefs, rhs))

      case OperEx(oper, args @ _*) if ReTLALanguagePred.naryOps.contains(oper) =>
        args.foldLeft[PredResult](PredResultOk()) { case (r, arg) =>
          r.and(isOkInContext(letDefs, arg))
        }

      case OperEx(oper, NameEx(_), set, pred) if ReTLALanguagePred.bindingOps.contains(oper) =>
        isOkInContext(letDefs, set).and(isOkInContext(letDefs, pred))

      case OperEx(TlaControlOper.ifThenElse, pred, thenEx, elseEx) =>
        isOkInContext(letDefs, pred)
          .and(isOkInContext(letDefs, thenEx))
          .and(isOkInContext(letDefs, elseEx))

      case LetInEx(body, defs @ _*) =>
        // go inside the let definitions (similar to FlatLanguagePred)
        def eachDefRec(ctx: Set[String], ds: List[TlaOperDecl]): PredResult = {
          ds match {
            case Nil =>
              PredResultOk()

            case head :: tail =>
              isOkInContext(ctx, head.body) // check the first operator definition
                .and(eachDefRec(ctx + head.name, tail)) // check the other operator definitions
          }
        }

        // check the let-definitions first, in a sequence, as they may refer to each other
        val defsResult = eachDefRec(letDefs, defs.toList)
        val newLetDefs = defs.map(_.name).toSet
        // check the terminal expression in the LET-IN chain, by assuming the context generated by the definitions
        defsResult
          .and(isOkInContext(letDefs ++ newLetDefs, body))

      case e @ OperEx(TlaOper.apply, NameEx(opName), args @ _*) =>
        // the only allowed case is calling a nullary operator that was declared with let-in
        if (!letDefs.contains(opName)) {
          PredResultFail(List((e.ID, s"undeclared operator $opName")))
        } else if (args.nonEmpty) {
          PredResultFail(List((e.ID, s"non-nullary operator $opName")))
        } else {
          PredResultOk()
        }

      case e =>
        PredResultFail(List((e.ID, e.toString)))
    }
  }
}

object ReTLALanguagePred {
  private val singleton = new ReTLALanguagePred

  protected val unaryOps: HashSet[TlaOper] =
    HashSet(
        TlaActionOper.prime,
        TlaBoolOper.not,
        TlaArithOper.uminus,
        ApalacheOper.skolem
    )

  protected val binaryOps: HashSet[TlaOper] =
    HashSet(
        TlaOper.eq,
        TlaFunOper.app,
        TlaArithOper.plus,
        TlaArithOper.minus,
        TlaArithOper.mult,
        TlaArithOper.div,
        TlaArithOper.mod,
        TlaArithOper.exp,
        TlaArithOper.lt,
        TlaArithOper.gt,
        TlaArithOper.le,
        TlaArithOper.ge,
        ApalacheOper.assign
    )

  protected val naryOps: HashSet[TlaOper] =
    HashSet(
        TlaBoolOper.and,
        TlaBoolOper.or,
        TlaFunOper.except,
        TlaFunOper.tuple // Only for args of multivariable functions, f[a,b] parses as f[<<a,b>>]
    )

  protected val bindingOps: HashSet[TlaOper] =
    HashSet(
        TlaBoolOper.exists,
        TlaBoolOper.forall
    )

  def apply(): ReTLALanguagePred = singleton
}
