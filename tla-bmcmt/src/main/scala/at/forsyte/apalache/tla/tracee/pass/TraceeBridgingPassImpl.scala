package at.forsyte.apalache.tla.tracee.pass

import at.forsyte.apalache.infra.passes.Pass.PassResult
import at.forsyte.apalache.tla.lir._
import com.google.inject.Inject
import com.typesafe.scalalogging.LazyLogging

/**
 * Bridging pass before BMC, to tie up any configuration that would have been set by passes not utilized in trace
 * evaluation.
 *
 * @author
 *   Jure Kukovec
 */
class TraceeBridgingPassImpl @Inject() extends TraceeBridgingPass with LazyLogging {

  override def name: String = "BridgingPass"

  override def execute(module: TlaModule): PassResult = Right(module)

  override def dependencies = Set()

  // In TraceE mode, there's no need to run the AnalysisPass, because the transitions generated by TraceePass do not
  // use skolemization or expansions.
  // However, as a safeguard, BMC requires `ModuleProperty.Analyzed` as a prerequisite, so we inject an intermediate
  // pass to spoof the AnalysisPass, and provide `ModuleProperty.Analyzed` manually.
  override def transformations = Set(ModuleProperty.Analyzed)
}
