<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>at.forsyte.apalache</groupId>
        <artifactId>apalache</artifactId>
        <version>0.8.2-SNAPSHOT</version>
    </parent>

    <!--
        All command line tooling and option parsing goes here... and nothing else!
    -->
    <artifactId>tool</artifactId>
        <version>0.8.2-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>tool</name>
    <url>https://github.com/informalsystems/apalache</url>

    <build>
        <plugins>
            <!-- generate git properties for versioning -->
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>4.0.3</version>
                <executions>
                    <execution>
                        <id>get-the-git-infos</id>
                        <goals>
                            <goal>revision</goal>
                        </goals>
                        <!-- *NOTE*: The default phase of revision is initialize, but in case you want to change it, you can do so by adding the phase here -->
                        <phase>initialize</phase>
                    </execution>
                </executions>

                <configuration>
                    <verbose>false</verbose>

                    <generateGitPropertiesFile>true</generateGitPropertiesFile>

                    <generateGitPropertiesFilename>${project.build.outputDirectory}/at/forsyte/apalache/tla/tooling/git.properties</generateGitPropertiesFilename>

                    <skipPoms>true</skipPoms>

                    <failOnNoGitDirectory>true</failOnNoGitDirectory>

                    <failOnUnableToExtractRepoInfo>true</failOnUnableToExtractRepoInfo>

                    <includeOnlyProperties>
                        <includeOnlyProperty>git.commit.id.describe</includeOnlyProperty>
                    </includeOnlyProperties>

                    <!-- @since 2.1.0 -->
                    <!--
                        The following `gitDescribe` configuration below is optional and can be leveraged as a really powerful versioning helper.
                        If you are not familar with [git-describe](https://github.com/git-commit-id/maven-git-commit-id-plugin#git-describe-short-intro-to-an-awesome-command) it is highly recommended to go through this part of the documentation. More advanced users can most likely skip the explanations in this section, as it just explains the same options that git provides.
                        As a side note this plugin tries to be 1-to-1 compatible with git's plain output, even though the describe functionality has been reimplemented manually using JGit (you don't have to have a git executable to use the plugin).
                        See also https://git-scm.com/docs/git-describe
                    -->
                    <gitDescribe>
                        <skip>false</skip>
                        <always>true</always>
                        <dirty>-dirty</dirty>

                        <!--
                            When you run git-describe it only looks only for *annotated tags* by default.
                            If you wish to consider *lightweight tags* in your describe as well you would need to switch this to `true`

                            The difference between *annotated tags* and *lightweight tags* is outlined in more depth here:
                            https://github.com/git-commit-id/maven-git-commit-id-plugin/#git-describe-and-a-small-gotcha-with-tags
                        -->
                        <tags>true</tags>

                        <!--
                            Explanation:
                            git-describe, by default, returns just the tag name, if the current commit is tagged.
                            Set this option to `true` to force it to format the output using the typical describe format ("${tag-name}-${commits_from_tag}-g${commit_id-maybe_dirty}"), even if "on" a tag.

                            An example would be: `tagname-0-gc0ffebabe` - notice that the distance from the tag is 0 here, if you don't use **forceLongFormat** mode, the describe for such commit would look like this: `tagname`.
                        -->
                        <forceLongFormat>true</forceLongFormat>
                    </gitDescribe>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>at.forsyte.apalache</groupId>
            <artifactId>tlair</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>at.forsyte.apalache</groupId>
            <artifactId>tla-import</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>at.forsyte.apalache</groupId>
            <artifactId>tla-assignments</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>at.forsyte.apalache</groupId>
            <artifactId>tla-bmcmt</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>at.forsyte.apalache</groupId>
            <artifactId>tla-types</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>org.backuity.clist</groupId>
            <artifactId>clist-core_2.12</artifactId>
            <version>3.5.1</version>
        </dependency>
        <dependency>
            <groupId>org.backuity.clist</groupId>
            <artifactId>clist-macros_2.12</artifactId>
            <version>3.5.1</version>
        </dependency>
        <dependency>
            <!-- configurations in property files -->
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-configuration2</artifactId>
            <version>2.7</version>
        </dependency>
        <dependency>
            <!-- commons-configuration2 uses commons-beanutiles (without declaring it in dependencies?) -->
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>1.9.4</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
            <groupId>com.typesafe.scala-logging</groupId>
            <artifactId>scala-logging_2.12</artifactId>
        </dependency>

        <dependency>
            <groupId>org.scalatest</groupId>
            <artifactId>scalatest_2.12</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>
