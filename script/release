#!/usr/bin/env bash
#
# Release the latest build to github.
# This requires the environment variable RELEASME_TOKEN
# set to a proper github token.
#
# Igor Konnov, 2018

set -e

if [ "$#" -lt "2" ]; then
    echo "Use: $0 [--overwrite] <tag> <release-notes>"
    exit 1
fi

if [ "$1" == "--overwrite" ]; then
    overwrite="1"
    shift
fi

tag="$1"
notes="$2"
shift 2

if [ "$RELEASEME_TOKEN" == "" ]; then
    echo "This script requires variable RELEASME_TOKEN"
    exit 2
fi

# make sure that we do not release uncommited files
(git diff --exit-code && git diff --cached --exit-code) \
    || (printf '\nERROR: Git directory is not clean. Commit the changes first.\n'; exit 255)

# the easiest way to extract the project version without maven
ver=`grep '<version>' pom.xml | head -n 1 | sed 's/.*>\(.*\)<.*/\1/'`
release="mod-distribution/target/apalache-pkg-${ver}-full.jar"

if [ ! -f "$release" ]; then
    echo "Release file not found: $release"
    exit 3
fi

if [ "$overwrite" != "" ]; then
    echo "Deleting the previous version first"
    releaseme delete -r informalsystems/apalache -t "${tag}" \
        || echo "Failed to delete"
fi

# overwrite the build number
BUILD=`git describe --tags`

ZIPF="apalache-${BUILD}.zip"
TGZF="apalache-${BUILD}.tgz"

zip -r "$ZIPF" bin/apalache-mc "$release"
tar zpcf "$TGZF" bin/apalache-mc "$release"

# release!
echo "Releasing version ${ver} as ${tag}"
git tag -f ${tag}
git push -f --tags
releaseme create -r informalsystems/apalache -t "${tag}" -n ${notes} \
    -a "$ZIPF" -a "$TGZF"
echo "Done"

# recover the script
rm bin/apalache-mc
git checkout bin/apalache-mc

